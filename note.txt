	
//通过异或交换值
用法：
void swap(int &a,int &b)
{
    a^=b;
    b^=a;
    a^=b; 
}

通用一点的形式是：
    a^b=c
    a^c=b 同时 b^c=a

即只要直到a,b,c中的任意两个，通过异或运算就可以算出另一个。
（这是磁盘位的恢复的一种手段。）

原理如下（摘录）：
^ 是按位异或操作符。两数相同的话异或的结果就是 0，否则是 1。
举个例子，比如 a 表示十进制的 5，b 表示十进制的 12，按位异或结果就是：

a = 0101   (5 的二进制表示)
b = 1100   (12 的二进制表示)
    ----
c = 1001   (结果为 9)

有两个定理：
任何一位二进制数同 1 异或都会变成另外一个（0 同 1 异或的结果是 1，1 同 1 异或的结果是 0）
任何一位二进制数同 0 异或都保持不变（0 同 0 异或的结果是 0，1 同 0 异或的结果是 1）

因为 c 中是 1 的部分表示 a 和 b 中按位不同的位，0 表示 a 和 b 中按位相同的位，那么
 a 同 c 异或的结果就是 a 中与 b 不同的位发生变化，二进制数每位只有两种状态，所以 a 变成了 b：

a = 0101
c = 1001
    ----
b = 1100

同样， b 与 c 异或结果就变成了 a：

b = 1100
c = 1001
    ----
a = 0101

//最大公约数
GCD即Greatest Common Divisor
最大公约数指某几个整数共有因子中最大的一个。
GCD即Greatest Common Divisor.
例如，12和30的公约数有：1、2、3、6，其中6就是12和30的最大公约数。
两个整数的最大公约数主要有两种寻找方法：
* 两数各分解质因子，然后取出同样有的项乘起来
* 辗转相除法（扩展版）
和最小公倍数（lcm）的关系：gcd(a, b)×lcm(a, b) = ab
两个整数的最大公因子可用于计算两数的最小公倍数，或分数化简成最简分数。
两个整数的最大公因子和最小公倍数中存在分配律：
* gcd(a, lcm(b, c)) = lcm(gcd(a, b), gcd(a, c))
* lcm(a, gcd(b, c)) = gcd(lcm(a, b), lcm(a, c))
在坐标里，将点(0, 0)和(a, b)连起来，通过整数坐标的点的数目（除了(0, 0)一点之外）就是gcd(a, b)。

//--------------------

#include<stdio.h>
//non-recursion
unsigned int gcd(unsigned int a,unsigned int b)
{
    int r;
    while(b>0)
    {
         r=a%b;
         a=b;
         b=r;
    }
    return a;
}
//
unsigned int gcd(unsigned int a,unsigned int b)
{
    while(b^=a^=b^=a%=b);
    return a;
}
//递归实现
unsigned int gcd(unsigned int a,unsigned int b)
{
    return (b>0)?gcd(b,a%b):a;
}

//最小公倍数(lowest common multiple)
#include<iostream>
usingnamespace std;
int GCD(int a, int b);
int LCM(int a, int b);
	
int main()
{
	int num1, num2, gcd, lcm;
	cout<<"求两个数的最大公约数及最小公倍数"<<endl<<endl;
	cout<<"请输入两个数：";
	cin>>num1>>num2;
	gcd = GCD(num1,num2);
	lcm = LCM(num1,num2);//输出最大公约数和最小公倍数
	cout<<"最大公约数为："<<gcd<<endl;
	cout<<"最小公倍数为："<<lcm<<endl;
	system("pause");
	return0;
}

int GCD(intnum1, intnum2){
	if(num1%num2==0)
		return num2;
	else 
		return GCD(num2,num1%num2);
}

int LCM(int a, int b){
	int temp_lcm;
	temp_lcm = a*b/GCD(a,b);//最小公倍数等于两数之积除以最大公约数
	return temp_lcm;
}
//今天8月1号，晚上去看电影《后会无期》
//今天8月2号，农历七月初七，七夕情人节